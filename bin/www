#!/usr/bin/env node
const app = require("../app");
const debug = require("debug")("starter:server");
const http = require("http");
const socketIO = require("socket.io");
const { ChatRoom } = require("../db/models");

// Get port from environment and store in Express
const port = normalizePort(process.env.PORT || "8080");
app.set("port", port);

// create HTTP server
const server = http.createServer(app);

// create socket io instance with server
const io = socketIO(server);

io.on("connection", (socket) => {
  socket.on("join", async (room) => {
    socket.join(room);
    io.emit("roomJoined", room);
  });

  socket.on("message", async (data) => {
    const { chatRoomName, author, message } = data;
    const chatRoom = await ChatRoom.findAll({
      chatRoomId,
      author,
      message: message,
    });
    io.emit("newMessage", chatMessage);
  });
});

// Listen on provided port, on all network interfaces
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// Normalize a port into a number, string, or false
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

// Event listener for HTTP server "error" event
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated priviledges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event

function onListening() {
  const address = server.address();
  const bind =
    typeof address === "string" ? "pipe " + address : "port " + address;
  debug("Listening on " + bind);
}
